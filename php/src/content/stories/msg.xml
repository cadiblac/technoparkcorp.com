<?xml version="1.0"?>
<!--
 *
 * Copyright (c) 2008, TechnoPark Corp., Florida, USA
 * All rights reserved. THIS IS PRIVATE SOFTWARE.
 *
 * Redistribution and use in source and binary forms, with or without modification, are PROHIBITED
 * without prior written permission from the author. This product may NOT be used anywhere
 * and on any computer except the server platform of TechnoPark Corp. located at
 * www.technoparkcorp.com. If you received this code accidentally and without intent to use
 * it, please report this incident to the author by email: privacy@technoparkcorp.com or
 * by mail: 568 Ninth Street South 202 Naples, Florida 34102, the United States of America,
 * tel. +1 (239) 243 0206, fax +1 (239) 236-0738.
 *
-->

<article>

<categories>

	<category>Continuous Integration</category>
	<category>Risk Mitigation</category>
	<category>Risk Management</category>

</categories>

<title>Risk mitigation approach</title>
<label></label>
<intro></intro>
<next></next>
<invisible/>

<description>

	The software package we had as a legacy from previous coders didn't have 
	a deployment mechanism. Manual deployment of every consecutive build could 
	take hours.  We saw this as the most critical risk. We had held a risk 
	analysis meeting and decided to mitigate this risk by a continuous integration 
	adjustment. The needed tools were found (Maven, nAnt) and integrated into the 
	whole auto-deployment mechanism. It took just 5 minutes to build, test and 
	deploy the system. Finally, this made the project successful.

</description>

<tex>

	The project objectives were to implement additional functionality to 
	the existing internet application. The new application features were: 
	bulk sms, sms subscriptions, a free sms sending feature with advertising 
	rotation, mobile content sharing and premium sms billing. The estimated 
	project cost was 1180 staff-hours, the schedule -- 4 months. The main 
	technologies were Java, Flex and PHP.
	
	One of the first steps at the project start was deep risk analysis. More 
	than 100 project risks were identified and assessed. Mitigation 
	and contingency plans were created for the top 20 risks. One of the 
	most interesting risk mitigation plans is described below.

\begin{tikzpicture}
	\node [storage] (source) at (2,5) {Source code in SVN};
	\node [storage] (platform) at (8,5) {Deployment platform};
	\path [line, -triangle 60] (source) -- node[above, text width=2cm, text centered] {autobuild and deploy} (platform);

	\draw [-angle 60, draw=tpcBlue, ultra thick] (source.north west) 
		.. controls +(-3,+2) and +(-3,-2) .. node [pos=0.1, above] {unit testing} (source.south west); 

	\draw [-angle 60, draw=tpcBlue, ultra thick] (platform.north east) 
		.. controls +(+3,+2) and +(+3,-2) .. node [pos=0.1, above] {auto testing} (platform.south east); 

	\node [above=2cm of source] (team) {Project team};
	\node [below=2cm of platform] (pm) {Project Manager};

	\draw [-angle 60, draw=tpcBlue, thick] (platform.south west) -- node [right=-5mm, draw=tpcGreen, fill=tpcGreen!30] {Integration Reports} (pm); 
	\draw [-angle 60, draw=tpcBlue, thick] (team) -- node [right=-0.2cm, draw=tpcGreen, fill=tpcGreen!30] {Changes} (source.north east); 
\end{tikzpicture}

	Existing software was delivered to us "as is", with no deployment process. 
	There was a risk that manual deployment of every new build would cause great cost and schedule losses.
	
	The mitigation plan was to investigate used technologies and adjust the continuous 
	integration process for the whole project. We found appropriable 
	tools (NAnt and Maven) and completed the solution.
	
	As a result, our team members just had to commit source code 
	to the repository. And in some minutes the compiled build was unit tested, 
	auto-deployed and auto tested. This was a very efficient tool to 
	develop this project on.

</tex>

</article>

